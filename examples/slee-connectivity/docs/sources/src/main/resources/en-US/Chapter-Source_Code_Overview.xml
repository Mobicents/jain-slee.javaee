<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Example_User_Guide.ent">
%BOOK_ENTITIES;
]>

<chapter id="source_code_overview">

	<title>Source Code Overview</title>
	<important>
		<para>
			To obtain the complete source code of this example please refer to
			<xref linkend="source_code" />.
		</para>
	</important>
	
	<section id="source_code_overview_sbb">
		<title>Source Code Overview: Sbb</title>
		<note>
			<para>
				The sip-wakeup example has more detailed descirption of the
				<acronym>XML</acronym>
				and it should be easier to grasp for most users.
			</para>
		</note>
		<para><acronym>SBB</acronym> descriptor is very simple. Its only purpose is to define <acronym>SBB</acronym> abstract class and event handler.
		Abstract class is defined as follows:</para>
		<programlisting language="XML" role="XML"><![CDATA[
		<sbb-name>SleeConnectivitySbb</sbb-name>
		<sbb-vendor>org.mobicents</sbb-vendor>
		<sbb-version>1.0</sbb-version>

		<sbb-classes>
			<sbb-abstract-class>
				<sbb-abstract-class-name>
					org.mobicents.slee.service.SleeConnectivitySbb
				</sbb-abstract-class-name>
			</sbb-abstract-class>
		</sbb-classes>
			]]>
			</programlisting>
		
		<para>
		Handler definition looks as follows:</para>
		<programlisting language="XML" role="XML"><![CDATA[
		<event event-direction="Receive" initial-event="True">
			<event-name>CustomEvent</event-name>
			<event-type-ref>
				<event-type-name>org.mobicents.slee.service.connectivity.Event_1</event-type-name>
				<event-type-vendor>org.mobicents</event-type-vendor>
				<event-type-version>1.0</event-type-version>
			</event-type-ref>
			<initial-event-select variable="ActivityContext" />
		</event>
			]]>
			</programlisting>
	</section>
	<section id="source_code_overview_jmx">
		<title>Source Code Overview: JMX Client</title>
		<para><acronym>JMX</acronym> Client is defined by two elements: <acronym>XML</acronym> descriptor and <acronym>POJO</acronym> class.</para>
		<para><acronym>XML</acronym> descriptor is very simple. It looks as follows(<filename>jboss-beans.xml</filename>): </para>
		<programlisting language="XML" role="XML"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<deployment xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="urn:jboss:bean-deployer:2.0">

	<bean name="SleeConnectionTest"
		class="org.mobicents.example.slee.connection.SleeConnectionTest">
		<annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(
			name="org.mobicents.slee:name=SleeConnectivityExample",exposedInterface=
			org.mobicents.example.slee.connection.SleeConnectionTestMBean.class
				,registerDirectly=true)
		</annotation>		
	</bean>

</deployment>
		]]>
			</programlisting>
			<para>Descriptor has following elements present: </para>
			<variablelist>
				<varlistentry>
					<term>bean</term>
					<listitem>
						<para> definition of <acronym>POJO</acronym> bean with human readable name and class</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>annotation</term>
					<listitem>
						<para>marks <acronym>POJO</acronym> as <acronym>JMX</acronym> exposed bean</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>property</term>
					<listitem>
						<para>sets value of java bean property with matching name </para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>demand</term>
					<listitem>
						<para>creates requirement - bean with name passed in this tag must be present for declared bean to be deployed</para>
					</listitem>
				</varlistentry>
			</variablelist>
			
			<para>Client contract is defined by implemented interface class, that is <literal>org.mobicents.example.slee.connection.SleeConnectionTestMBean</literal> </para>
			<variablelist>
				<varlistentry>
					<term>public void fireEvent(String message);</term>
					<listitem>
						<para>Fires event using to JAIN SLEE container. The event will contain the specified message parameter.</para>
					</listitem>
				</varlistentry>
			</variablelist>
			
			<para>Concrete implementation can be found in <literal>org.mobicents.example.slee.connection.SleeConnectionTest</literal> class.</para>
			<programlisting role="JAVA" language="Java">
			
		public void fireEvent(String messagePassed) {

		// depending on deployment it does following:
		// 1. lookup RA and make RMI calls through it
		// 2. lookup local Bean, which makes direct calls to container!
		logger.info("Attempting call to SleeConnectionFactory.");
		try {

			InitialContext ic = new InitialContext();
			// this is call to local JNDI space, private, it cant be accessed
			// from other JVM
			SleeConnectionFactory factory = (SleeConnectionFactory) ic
					.lookup("java:/MobicentsConnectionFactory");

			SleeConnection conn1 = null;
			try {
				conn1 = factory.getConnection();

				ExternalActivityHandle handle = conn1.createActivityHandle();

				EventTypeID requestType = conn1.getEventTypeID(eventName,
						eventVendor, eventVersion);
				CustomEvent customEvent = new CustomEvent();
				customEvent.setMessage(messagePassed);
				logger.info("The event type is: " + requestType);

				conn1.fireEvent(customEvent, requestType, handle, null);
			} finally {
				if (conn1 != null)
					conn1.close();
			}

		} catch (Exception e) {
			logger.error("Exception caught in event fire method!", e);

		}
	}
			</programlisting>
			
	</section>

</chapter>

